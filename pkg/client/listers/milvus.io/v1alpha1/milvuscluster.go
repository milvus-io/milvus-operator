/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/milvus-io/milvus-operator/apis/milvus.io/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MilvusClusterLister helps list MilvusClusters.
// All objects returned here must be treated as read-only.
type MilvusClusterLister interface {
	// List lists all MilvusClusters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MilvusCluster, err error)
	// MilvusClusters returns an object that can list and get MilvusClusters.
	MilvusClusters(namespace string) MilvusClusterNamespaceLister
	MilvusClusterListerExpansion
}

// milvusClusterLister implements the MilvusClusterLister interface.
type milvusClusterLister struct {
	indexer cache.Indexer
}

// NewMilvusClusterLister returns a new MilvusClusterLister.
func NewMilvusClusterLister(indexer cache.Indexer) MilvusClusterLister {
	return &milvusClusterLister{indexer: indexer}
}

// List lists all MilvusClusters in the indexer.
func (s *milvusClusterLister) List(selector labels.Selector) (ret []*v1alpha1.MilvusCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MilvusCluster))
	})
	return ret, err
}

// MilvusClusters returns an object that can list and get MilvusClusters.
func (s *milvusClusterLister) MilvusClusters(namespace string) MilvusClusterNamespaceLister {
	return milvusClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MilvusClusterNamespaceLister helps list and get MilvusClusters.
// All objects returned here must be treated as read-only.
type MilvusClusterNamespaceLister interface {
	// List lists all MilvusClusters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MilvusCluster, err error)
	// Get retrieves the MilvusCluster from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MilvusCluster, error)
	MilvusClusterNamespaceListerExpansion
}

// milvusClusterNamespaceLister implements the MilvusClusterNamespaceLister
// interface.
type milvusClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MilvusClusters in the indexer for a given namespace.
func (s milvusClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MilvusCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MilvusCluster))
	})
	return ret, err
}

// Get retrieves the MilvusCluster from the indexer for a given namespace and name.
func (s milvusClusterNamespaceLister) Get(name string) (*v1alpha1.MilvusCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("milvuscluster"), name)
	}
	return obj.(*v1alpha1.MilvusCluster), nil
}
